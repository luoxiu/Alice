public struct HTTPHeaderName: RawRepresentable {

    public let rawValue: String
    private let lowercased: String
    
    public init(rawValue: String) {
        self.rawValue = rawValue
        self.lowercased = rawValue.lowercased()
    }
    
    public init(_ rawValue: String) {
        self.init(rawValue: rawValue)
    }
}

extension HTTPHeaderName: Equatable, Hashable, Comparable, ExpressibleByStringLiteral {
    
    public static func == (lhs: HTTPHeaderName, rhs: HTTPHeaderName) -> Bool {
        return lhs.lowercased == rhs.lowercased
    }
    
    public static func < (lhs: HTTPHeaderName, rhs: HTTPHeaderName) -> Bool {
        return lhs.lowercased < rhs.lowercased
    }
    
    public init(stringLiteral value: String) {
        self.init(value)
    }
}

extension HTTPHeaderName: CustomStringConvertible {

    public var description: String {
        return self.rawValue
    }
}

extension HTTPHeaderName {

    public static let aIM = HTTPHeaderName("A-Im")
    public static let accept = HTTPHeaderName("Accept")
    public static let acceptAdditions = HTTPHeaderName("Accept-Additions")
    public static let acceptCharset = HTTPHeaderName("Accept-Charset")
    public static let acceptDatetime = HTTPHeaderName("Accept-Datetime")
    public static let acceptEncoding = HTTPHeaderName("Accept-Encoding")
    public static let acceptFeatures = HTTPHeaderName("Accept-Features")
    public static let acceptLanguage = HTTPHeaderName("Accept-Language")
    public static let acceptPatch = HTTPHeaderName("Accept-Patch")
    public static let acceptPost = HTTPHeaderName("Accept-Post")
    public static let acceptRanges = HTTPHeaderName("Accept-Ranges")
    public static let accessControl = HTTPHeaderName("Access-Control")
    public static let accessControlAllowCredentials = HTTPHeaderName("Access-Control-Allow-Credentials")
    public static let accessControlAllowHeaders = HTTPHeaderName("Access-Control-Allow-Headers")
    public static let accessControlAllowMethods = HTTPHeaderName("Access-Control-Allow-Methods")
    public static let accessControlAllowOrigin = HTTPHeaderName("Access-Control-Allow-Origin")
    public static let accessControlExpose = HTTPHeaderName("Access-Control-Expose-Headers")
    public static let accessControlMaxAge = HTTPHeaderName("Access-Control-Max-Age")
    public static let accessControlRequestMethod = HTTPHeaderName("Access-Control-Request-Method")
    public static let accessControlRequestHeaders = HTTPHeaderName("Access-Control-Request-Headers")
    public static let age = HTTPHeaderName("Age")
    public static let allow = HTTPHeaderName("Allow")
    public static let alpn = HTTPHeaderName("Alpn")
    public static let alternates = HTTPHeaderName("Alternates")
    public static let altSvc = HTTPHeaderName("Alt-Svc")
    public static let altUsed = HTTPHeaderName("Alt-Used")
    public static let applyToRedirectRef = HTTPHeaderName("Apply-To-Redirect-Ref")
    public static let authenticationControl = HTTPHeaderName("Authentication-Control")
    public static let authenticationInfo = HTTPHeaderName("Authentication-Info")
    public static let authorization = HTTPHeaderName("Authorization")
    public static let cacheControl = HTTPHeaderName("Cache-Control")
    public static let calDAVTimezones = HTTPHeaderName("Caldav-Timezones")
    public static let cExt = HTTPHeaderName("C-Ext")
    public static let close = HTTPHeaderName("Close")
    public static let cMan = HTTPHeaderName("C-Man")
    public static let cOpt = HTTPHeaderName("C-Opt")
    public static let compliance = HTTPHeaderName("Compliance")
    public static let connection = HTTPHeaderName("Connection")
    public static let contentBase = HTTPHeaderName("Content-Base")
    public static let contentDisposition = HTTPHeaderName("Content-Disposition")
    public static let contentEncoding = HTTPHeaderName("Content-Encoding")
    public static let contentID = HTTPHeaderName("Content-Id")
    public static let contentLanguage = HTTPHeaderName("Content-Language")
    public static let contentLength = HTTPHeaderName("Content-Length")
    public static let contentLocation = HTTPHeaderName("Content-Location")
    public static let contentMD5 = HTTPHeaderName("Content-Md5")
    public static let contentRange = HTTPHeaderName("Content-Range")
    public static let contentScriptType = HTTPHeaderName("Content-Script-Type")
    public static let contentSecurityPolicy = HTTPHeaderName("Content-Security-Policy")
    public static let contentSecurityPolicyReportOnly = HTTPHeaderName("Content-Security-Policy-Reporty-Only")
    public static let contentStyleType = HTTPHeaderName("Content-Style-Type")
    public static let contentTransferEncoding = HTTPHeaderName("Content-Transfer-Encoding")
    public static let contentType = HTTPHeaderName("Content-Type")
    public static let contentVersion = HTTPHeaderName("Content-Version")
    public static let cookie = HTTPHeaderName("Cookie")
    public static let cookie2 = HTTPHeaderName("Cookie2")
    public static let cost = HTTPHeaderName("Cost")
    public static let cPEP = HTTPHeaderName("C-Pep")
    public static let cPEPInfo = HTTPHeaderName("C-Pep-Info")
    public static let dasl = HTTPHeaderName("Dasl")
    public static let dav = HTTPHeaderName("Dav")
    public static let date = HTTPHeaderName("Date")
    public static let defaultStyle = HTTPHeaderName("Default-Style")
    public static let deltaBase = HTTPHeaderName("Delta-Base")
    public static let depth = HTTPHeaderName("Depth")
    public static let derivedFrom = HTTPHeaderName("Derived-From")
    public static let destination = HTTPHeaderName("Destination")
    public static let differentialID = HTTPHeaderName("Differential-Id")
    public static let digest = HTTPHeaderName("Digest")
    public static let ediintFeatures = HTTPHeaderName("Ediint-Features")
    public static let eTag = HTTPHeaderName("Etag")
    public static let expect = HTTPHeaderName("Expect")
    public static let expires = HTTPHeaderName("Expires")
    public static let ext = HTTPHeaderName("Ext")
    public static let forwarded = HTTPHeaderName("Forwarded")
    public static let from = HTTPHeaderName("From")
    public static let getProfile = HTTPHeaderName("Getprofile")
    public static let hobareg = HTTPHeaderName("Hobareg")
    public static let host = HTTPHeaderName("Host")
    public static let http2Settings = HTTPHeaderName("Http2-Settings")
    public static let im = HTTPHeaderName("Im")
    public static let `if` = HTTPHeaderName("If")
    public static let ifMatch = HTTPHeaderName("If-Match")
    public static let ifModifiedSince = HTTPHeaderName("If-Modified-Since")
    public static let ifNoneMatch = HTTPHeaderName("If-None-Match")
    public static let ifRange = HTTPHeaderName("If-Range")
    public static let ifScheduleTagMatch = HTTPHeaderName("If-Schedule-Tag-Match")
    public static let ifUnmodifiedSince = HTTPHeaderName("If-Unmodified-Since")
    public static let keepAlive = HTTPHeaderName("Keep-Alive")
    public static let label = HTTPHeaderName("Label")
    public static let lastModified = HTTPHeaderName("Last-Modified")
    public static let link = HTTPHeaderName("Link")
    public static let location = HTTPHeaderName("Location")
    public static let lockToken = HTTPHeaderName("Lock-Token")
    public static let man = HTTPHeaderName("Man")
    public static let maxForwards = HTTPHeaderName("Max-Forwards")
    public static let mementoDatetime = HTTPHeaderName("Memento-Datetime")
    public static let messageID = HTTPHeaderName("Message-Id")
    public static let meter = HTTPHeaderName("Meter")
    public static let methodCheck = HTTPHeaderName("Method-Check")
    public static let methodCheckExpires = HTTPHeaderName("Method-Check-Expires")
    public static let mimeVersion = HTTPHeaderName("Mime-Version")
    public static let negotiate = HTTPHeaderName("Negotiate")
    public static let nonCompliance = HTTPHeaderName("Non-Compliance")
    public static let opt = HTTPHeaderName("Opt")
    public static let optional = HTTPHeaderName("Optional")
    public static let optionalWWWAuthenticate = HTTPHeaderName("Optional-Ww-Authenticate")
    public static let orderingType = HTTPHeaderName("Ordering-Type")
    public static let origin = HTTPHeaderName("Origin")
    public static let overwrite = HTTPHeaderName("Overwrite")
    public static let p3p = HTTPHeaderName("P3P")
    public static let pep = HTTPHeaderName("Pep")
    public static let pepInfo = HTTPHeaderName("Pep-Info")
    public static let picsLabel = HTTPHeaderName("Pics-Label")
    public static let position = HTTPHeaderName("Position")
    public static let pragma = HTTPHeaderName("Pragma")
    public static let prefer = HTTPHeaderName("Prefer")
    public static let preferenceApplied = HTTPHeaderName("Preference-Applied")
    public static let profileObject = HTTPHeaderName("Profileobject")
    public static let `protocol` = HTTPHeaderName("Protocol")
    public static let protocolInfo = HTTPHeaderName("Protocol-Info")
    public static let protocolQuery = HTTPHeaderName("Protocol-Query")
    public static let protocolRequest = HTTPHeaderName("Protocol-Request")
    public static let proxyAuthenticate = HTTPHeaderName("Proxy-Authenticate")
    public static let proxyAuthenticationInfo = HTTPHeaderName("Proxy-Authentication-Info")
    public static let proxyAuthorization = HTTPHeaderName("Proxy-Authorization")
    public static let proxyFeatures = HTTPHeaderName("Proxy-Features")
    public static let proxyInstruction = HTTPHeaderName("Proxy-Instruction")
    public static let `public` = HTTPHeaderName("Public")
    public static let publicKeyPins = HTTPHeaderName("Public-Key-Pins")
    public static let publicKeyPinsReportOnly = HTTPHeaderName("Public-Key-Pins-Report-Only")
    public static let range = HTTPHeaderName("Range")
    public static let redirectRef = HTTPHeaderName("Redirect-Ref")
    public static let referer = HTTPHeaderName("Referer")
    public static let refererRoot = HTTPHeaderName("Referer-Root")
    public static let resolutionHint = HTTPHeaderName("Resolution-Hint")
    public static let resolverLocation = HTTPHeaderName("Resolver-Location")
    public static let retryAfter = HTTPHeaderName("Retry-After")
    public static let safe = HTTPHeaderName("Safe")
    public static let scheduleReply = HTTPHeaderName("Schedule-Reply")
    public static let scheduleTag = HTTPHeaderName("Schedule-Tag")
    public static let secWebSocketAccept = HTTPHeaderName("Sec-Websocket-Accept")
    public static let secWebSocketExtensions = HTTPHeaderName("Sec-Websocket-Extensions")
    public static let secWebSocketKey = HTTPHeaderName("Sec-Websocket-Key")
    public static let secWebSocketProtocol = HTTPHeaderName("Sec-Websocket-Protocol")
    public static let secWebSocketVersion = HTTPHeaderName("Sec-Websocket-Version")
    public static let securityScheme = HTTPHeaderName("Security-Scheme")
    public static let server = HTTPHeaderName("Server")
    public static let setCookie = HTTPHeaderName("Set-Cookie")
    public static let setCookie2 = HTTPHeaderName("Set-Cookie2")
    public static let setProfile = HTTPHeaderName("Setprofile")
    public static let slug = HTTPHeaderName("Slug")
    public static let soapAction = HTTPHeaderName("Soapaction")
    public static let statusURI = HTTPHeaderName("Status-Uri")
    public static let strictTransportSecurity = HTTPHeaderName("Strict-Transport-Security")
    public static let subOK = HTTPHeaderName("Subok")
    public static let subst = HTTPHeaderName("Subst")
    public static let surrogateCapability = HTTPHeaderName("Surrogate-Capability")
    public static let surrogateControl = HTTPHeaderName("Surrogate-Control")
    public static let tcn = HTTPHeaderName("Tcn")
    public static let te = HTTPHeaderName("Te")
    public static let timeout = HTTPHeaderName("Timeout")
    public static let title = HTTPHeaderName("Title")
    public static let topic = HTTPHeaderName("Topic")
    public static let trailer = HTTPHeaderName("Trailer")
    public static let transferEncoding = HTTPHeaderName("Transfer-Encoding")
    public static let ttl = HTTPHeaderName("Ttl")
    public static let uaColor = HTTPHeaderName("Ua-Color")
    public static let uaMedia = HTTPHeaderName("Ua-Media")
    public static let uaPixels = HTTPHeaderName("Ua-Pixels")
    public static let uaResolution = HTTPHeaderName("Ua-Resolution")
    public static let uaWindowpixels = HTTPHeaderName("Ua-Windowpixels")
    public static let urgency = HTTPHeaderName("Urgency")
    public static let uri = HTTPHeaderName("Uri")
    public static let upgrade = HTTPHeaderName("Upgrade")
    public static let userAgent = HTTPHeaderName("User-Agent")
    public static let variantVary = HTTPHeaderName("Variant-Vary")
    public static let vary = HTTPHeaderName("Vary")
    public static let version = HTTPHeaderName("Version")
    public static let via = HTTPHeaderName("Via")
    public static let wwwAuthenticate = HTTPHeaderName("Www-Authenticate")
    public static let wantDigest = HTTPHeaderName("Want-Digest")
    public static let warning = HTTPHeaderName("Warning")
    public static let xContentTypeOptions = HTTPHeaderName("X-Content-Type-Options")
    public static let xDeviceAccept = HTTPHeaderName("X-Device-Accept")
    public static let xDeviceAcceptCharset = HTTPHeaderName("X-Device-Accept-Charset")
    public static let xDeviceAcceptEncoding = HTTPHeaderName("X-Device-Accept-Encoding")
    public static let xDeviceAcceptLanguage = HTTPHeaderName("X-Device-Accept-Language")
    public static let xDeviceUserAgent = HTTPHeaderName("X-Device-User-Agent")
    public static let xFrameOptions = HTTPHeaderName("X-Frame-Options")
    public static let xRequestedWith = HTTPHeaderName("X-Requested-With")
    public static let xXssProtection = HTTPHeaderName("X-Xss-Protection")
}
